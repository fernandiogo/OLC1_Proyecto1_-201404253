// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/analisis/lexico.jflex

package analisis;

import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int CADENA1 = 4;
  public static final int CADENA2 = 6;
  public static final int CADENA3 = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  3,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  6,  7,  0, 
     8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9, 10, 11, 12, 13,  0, 
    14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 20, 25, 26, 27, 28, 
    29, 20, 30, 31, 32, 33, 34, 20, 35, 36, 37, 38,  0, 39,  0,  0, 
     0, 40, 41, 42, 43, 44,  0, 45, 46, 47, 48,  0, 49, 50, 51, 52, 
    53,  0, 54, 55, 56, 57, 58,  0, 59, 60, 61,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\16\14\1\15\1\16\15\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\0\1\27\25\0\1\5\1\30\3\0\1\31\2\0"+
    "\1\32\4\0\1\33\1\0\1\34\1\35\1\36\2\0"+
    "\1\37\1\40\2\0\1\41\1\42\3\0\1\43\1\44"+
    "\1\45\4\0\1\46\12\0\1\47\1\50\1\51\4\0"+
    "\1\52\1\0\1\53\6\0\1\54\1\55\1\0\1\56"+
    "\4\0\1\57\1\60\1\61\1\62\1\0\1\63\1\0"+
    "\1\64\1\0\1\65\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u0174"+
    "\0\u0174\0\u01b2\0\u0174\0\u0174\0\u01f0\0\u0174\0\u0174\0\u0174"+
    "\0\u022e\0\u0174\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0174\0\u0174"+
    "\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0"+
    "\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0174\0\u0174\0\u0174"+
    "\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0554\0\u0174\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0554\0\u0174\0\u0aa8\0\u0ae6"+
    "\0\u0b24\0\u0174\0\u0b62\0\u0ba0\0\u0174\0\u0bde\0\u0c1c\0\u0c5a"+
    "\0\u0c98\0\u0174\0\u0cd6\0\u0174\0\u0d14\0\u0174\0\u0d52\0\u0d90"+
    "\0\u0174\0\u0174\0\u0dce\0\u0e0c\0\u0e4a\0\u0174\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\u0174\0\u0174\0\u0174\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u0174\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u11ec\0\u122a\0\u1268\0\u0174\0\u12a6\0\u0174\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u0174\0\u13dc\0\u0174\0\u141a\0\u1458\0\u1496"+
    "\0\u14d4\0\u1512\0\u1550\0\u158e\0\u0174\0\u15cc\0\u0174\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u0174\0\u0174\0\u0174\0\u0174\0\u1702"+
    "\0\u0174\0\u1740\0\u0174\0\u177e\0\u0174\0\u0174\0\u0174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\6\1\7\1\10\1\11\2\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\22\1\26\1\27\2\22\1\30\1\31"+
    "\2\22\1\32\1\33\1\34\1\35\1\22\1\36\3\22"+
    "\1\37\1\40\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\2\0\1\47\1\50\2\0\1\51\1\52\1\53"+
    "\1\54\1\0\1\55\3\0\4\56\1\57\71\56\6\60"+
    "\1\0\2\60\1\61\1\60\1\0\62\60\2\62\1\0"+
    "\14\62\27\63\30\62\13\64\1\65\1\64\1\0\60\64"+
    "\1\0\2\6\200\0\1\66\1\12\73\0\1\67\125\0"+
    "\1\70\27\0\1\70\35\0\1\71\5\0\1\72\21\0"+
    "\1\71\5\0\1\72\40\0\1\73\4\0\1\74\22\0"+
    "\1\73\4\0\1\74\41\0\1\75\2\0\1\76\7\0"+
    "\1\77\14\0\1\75\2\0\1\76\7\0\1\77\40\0"+
    "\1\100\27\0\1\100\36\0\1\101\27\0\1\101\35\0"+
    "\1\102\30\0\1\102\44\0\1\103\3\0\1\104\3\0"+
    "\1\105\4\0\1\106\4\0\1\107\6\0\1\103\3\0"+
    "\1\104\2\0\1\105\4\0\1\106\4\0\1\107\42\0"+
    "\1\110\27\0\1\110\32\0\1\111\30\0\1\111\62\0"+
    "\1\112\27\0\1\112\33\0\1\113\27\0\1\113\35\0"+
    "\1\114\30\0\1\114\35\0\1\115\123\0\1\116\27\0"+
    "\1\116\26\0\1\117\30\0\1\117\56\0\1\120\1\0"+
    "\1\121\25\0\1\120\1\0\1\121\54\0\1\122\27\0"+
    "\1\122\44\0\1\123\27\0\1\123\27\0\1\124\30\0"+
    "\1\124\43\0\1\125\30\0\1\125\45\0\1\126\30\0"+
    "\1\126\40\0\1\127\30\0\1\127\64\0\1\130\27\0"+
    "\1\130\26\0\1\131\30\0\1\131\67\0\1\132\27\0"+
    "\1\132\24\0\1\133\30\0\1\133\55\0\1\134\27\0"+
    "\1\134\34\0\1\135\30\0\1\135\53\0\1\136\27\0"+
    "\1\136\43\0\1\137\4\0\1\140\22\0\1\137\4\0"+
    "\1\140\50\0\1\141\27\0\1\141\40\0\1\142\27\0"+
    "\1\142\53\0\1\143\27\0\1\143\36\0\1\144\4\0"+
    "\1\145\22\0\1\144\4\0\1\145\45\0\1\146\27\0"+
    "\1\146\50\0\1\147\27\0\1\147\43\0\1\150\27\0"+
    "\1\150\26\0\1\151\30\0\1\151\67\0\1\152\1\153"+
    "\26\0\1\152\1\153\22\0\1\154\30\0\1\154\60\0"+
    "\1\155\27\0\1\155\50\0\1\156\27\0\1\156\30\0"+
    "\1\157\30\0\1\157\50\0\1\160\27\0\1\160\35\0"+
    "\1\161\30\0\1\161\60\0\1\162\27\0\1\162\37\0"+
    "\1\163\27\0\1\163\61\0\1\164\27\0\1\164\45\0"+
    "\1\165\27\0\1\165\33\0\1\166\27\0\1\166\50\0"+
    "\1\167\27\0\1\167\47\0\1\170\27\0\1\170\42\0"+
    "\1\171\27\0\1\171\42\0\1\172\27\0\1\172\53\0"+
    "\1\173\27\0\1\173\42\0\1\174\27\0\1\174\33\0"+
    "\1\175\30\0\1\175\65\0\1\176\27\0\1\176\43\0"+
    "\1\177\27\0\1\177\40\0\1\200\27\0\1\200\37\0"+
    "\1\201\30\0\1\201\40\0\1\202\30\0\1\202\60\0"+
    "\1\203\27\0\1\203\43\0\1\204\27\0\1\204\37\0"+
    "\1\205\30\0\1\205\41\0\1\206\10\0\1\207\3\0"+
    "\1\210\13\0\1\206\7\0\1\207\3\0\1\210\35\0"+
    "\1\211\27\0\1\211\53\0\1\212\27\0\1\212\31\0"+
    "\1\213\30\0\1\213\61\0\1\214\27\0\1\214\50\0"+
    "\1\215\27\0\1\215\41\0\1\216\27\0\1\216\35\0"+
    "\1\217\30\0\1\217\40\0\1\220\30\0\1\220\54\0"+
    "\1\221\27\0\1\221\45\0\1\222\27\0\1\222\54\0"+
    "\1\223\27\0\1\223\26\0\1\224\30\0\1\224\57\0"+
    "\1\225\27\0\1\225\56\0\1\226\1\227\26\0\1\226"+
    "\1\227\46\0\1\230\27\0\1\230\36\0\1\231\27\0"+
    "\1\231\42\0\1\232\27\0\1\232\35\0\1\233\30\0"+
    "\1\233\40\0\1\234\30\0\1\234\44\0\1\235\30\0"+
    "\1\235\50\0\1\236\30\0\1\236\53\0\1\237\27\0"+
    "\1\237\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6076];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\3\11\1\1\2\11\1\1\3\11\1\1"+
    "\1\11\14\1\2\11\15\0\10\11\1\0\1\11\25\0"+
    "\1\1\1\11\3\0\1\11\2\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\1\1\11\2\0\2\11\2\0\1\1"+
    "\1\11\3\0\3\11\4\0\1\11\12\0\1\11\1\1"+
    "\1\11\4\0\1\11\1\0\1\11\6\0\1\1\1\11"+
    "\1\0\1\11\4\0\4\11\1\0\1\11\1\0\1\11"+
    "\1\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    String cadena = "";
    String cadena1 = "";
    String cadena2 = "";
    String cadena3 = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] {  }");
            { 
            }
          // fall through
          case 56: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return new Symbol(sym.EXCLAMACION,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.EXCLAMACION,yyline,yycolumn,yytext());
            }
          // fall through
          case 57: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { yybegin(CADENA);cadena=\"\"; }");
            { yybegin(CADENA);cadena="";
            }
          // fall through
          case 58: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return new Symbol(sym.COMA,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.COMA,yyline,yycolumn,yytext());
            }
          // fall through
          case 59: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return new Symbol(sym.DECIMAL,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.DECIMAL,yyline,yycolumn,yytext());
            }
          // fall through
          case 60: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return new Symbol(sym.DOSPUNTOS,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.DOSPUNTOS,yyline,yycolumn,yytext());
            }
          // fall through
          case 61: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return new Symbol(sym.PTYCOMA,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.PTYCOMA,yyline,yycolumn,yytext());
            }
          // fall through
          case 62: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return new Symbol(sym.MENORQ,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.MENORQ,yyline,yycolumn,yytext());
            }
          // fall through
          case 63: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return new Symbol(sym.IGUAL,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.IGUAL,yyline,yycolumn,yytext());
            }
          // fall through
          case 64: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return new Symbol(sym.MAYORQ,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.MAYORQ,yyline,yycolumn,yytext());
            }
          // fall through
          case 65: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return new Symbol(sym.ARROBA,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.ARROBA,yyline,yycolumn,yytext());
            }
          // fall through
          case 66: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { yybegin(CADENA2);cadena2=\"\"; }");
            { yybegin(CADENA2);cadena2="";
            }
          // fall through
          case 67: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return new Symbol(sym.CORCHETE1,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.CORCHETE1,yyline,yycolumn,yytext());
            }
          // fall through
          case 68: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return new Symbol(sym.CORCHETE2,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.CORCHETE2,yyline,yycolumn,yytext());
            }
          // fall through
          case 69: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { cadena+=yytext(); }");
            { cadena+=yytext();
            }
          // fall through
          case 70: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { String tmp=cadena; cadena=\"\"; yybegin(YYINITIAL); return new Symbol(sym.CADENA, yycolumn,yyline,tmp); }");
            { String tmp=cadena; cadena=""; yybegin(YYINITIAL); return new Symbol(sym.CADENA, yycolumn,yyline,tmp);
            }
          // fall through
          case 71: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { cadena1+=yytext(); }");
            { cadena1+=yytext();
            }
          // fall through
          case 72: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { String tmp=cadena1; cadena1=\"\"; yybegin(YYINITIAL); return new Symbol(sym.CADENA1, yycolumn,yyline,tmp); }");
            { String tmp=cadena1; cadena1=""; yybegin(YYINITIAL); return new Symbol(sym.CADENA1, yycolumn,yyline,tmp);
            }
          // fall through
          case 73: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { cadena2+=yytext(); }");
            { cadena2+=yytext();
            }
          // fall through
          case 74: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { String tmp=cadena2; cadena2=\"\"; yybegin(YYINITIAL); return new Symbol(sym.CADENA2, yycolumn,yyline,tmp); }");
            { String tmp=cadena2; cadena2=""; yybegin(YYINITIAL); return new Symbol(sym.CADENA2, yycolumn,yyline,tmp);
            }
          // fall through
          case 75: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { cadena3+=yytext(); }");
            { cadena3+=yytext();
            }
          // fall through
          case 76: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { String tmp=cadena3; cadena3=\"\"; yybegin(YYINITIAL); return new Symbol(sym.CADENA3, yycolumn,yyline,tmp); }");
            { String tmp=cadena3; cadena3=""; yybegin(YYINITIAL); return new Symbol(sym.CADENA3, yycolumn,yyline,tmp);
            }
          // fall through
          case 77: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return new Symbol(sym.FLECHAI,yyline,yycolumn,yytext()); }");
            { return new Symbol(sym.FLECHAI,yyline,yycolumn,yytext());
            }
          // fall through
          case 78: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return new Symbol(sym.TK_ARR, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_ARR, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return new Symbol(sym.TK_DIV, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_DIV, yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return new Symbol(sym.TK_END, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_END, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return new Symbol(sym.TK_MAX, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_MAX, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { return new Symbol(sym.TK_MIN, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_MIN, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return new Symbol(sym.TK_MOD, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_MOD, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return new Symbol(sym.TK_MUL, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_MUL, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return new Symbol(sym.TK_RES, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_RES, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return new Symbol(sym.TK_SUM, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_SUM, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return new Symbol(sym.TK_VAR, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_VAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return new Symbol(sym.TK_CHAR, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_CHAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return new Symbol(sym.TK_EJEX, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_EJEX, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return new Symbol(sym.TK_EJEY, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_EJEY, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return new Symbol(sym.TK_EXEC, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_EXEC, yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return new Symbol(sym.TK_MODA, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_MODA, yyline, yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { return new Symbol(sym.TK_LABEL, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_LABEL, yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return new Symbol(sym.TK_MEDIA, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_MEDIA, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return new Symbol(sym.TK_PRINT, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_PRINT, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return new Symbol(sym.TK_COLUMNA, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_COLUMNA, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return new Symbol(sym.TK_DOUBLE, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_DOUBLE, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return new Symbol(sym.TK_TITULO, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_TITULO, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return new Symbol(sym.TK_VALUE, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_VALUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return new Symbol(sym.TK_CONSOLE, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_CONSOLE, yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { return new Symbol(sym.TK_MEDIANA, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_MEDIANA, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return new Symbol(sym.TK_PROGRAM, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_PROGRAM, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return new Symbol(sym.TK_TITULOX, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_TITULOX, yyline, yycolumn, yytext());
            }
          // fall through
          case 104: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return new Symbol(sym.TK_TIUTLOY, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_TIUTLOY, yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return new Symbol(sym.TK_GRAPHBAR, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_GRAPHBAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return new Symbol(sym.TK_PIE, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_PIE, yyline, yycolumn, yytext());
            }
          // fall through
          case 107: break;
          case 53:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return new Symbol(sym.TK_VARIANZA, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_VARIANZA, yyline, yycolumn, yytext());
            }
          // fall through
          case 108: break;
          case 54:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return new Symbol(sym.TK_GRAPHLINE, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_GRAPHLINE, yyline, yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 55:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return new Symbol(sym.TK_HISTOGRAM, yyline, yycolumn, yytext()); }");
            { return new Symbol(sym.TK_HISTOGRAM, yyline, yycolumn, yytext());
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scanner scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scanner(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
